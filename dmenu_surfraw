#!/bin/bash
export IN_DMENU_SURFRAW=yes

me=dmenu_surfraw

case "${DO_FIELD_SPLIT:=yes}" in
	yes|no) ;;
	*) notify-send -t 1000 "$me: must set \$DO_FIELD_SPLIT to (yes|no)"; exit 1 ;;
esac
# Surfraw bookmarks can be searched if they have embedded "%s", but none of mine do.
case "${DO_SKIP_BOOKMARK_TERMS:=yes}" in
	yes|no) ;;
	*) notify-send -t 1000 "$me: must set \$DO_SKIP_BOOKMARK_TERMS to (yes|no)"; exit 1 ;;
esac

source surfraw
# Local elvi have precedence
elvi=($( { cd "$(get_local_elvi_dir)" 2>/dev/null && echo *; cd "$elvidir" 2>/dev/null && echo *; } | sort | uniq ))
bookmarks=($(cut -f1 "$(find_local_conf bookmarks)" "$(find_global_conf bookmarks)" 2>/dev/null | sort | uniq | tr -s '\n'))
# Elvi or bookmarks
declare -A objs
for bm in "${bookmarks[@]}"; do
	objs["$bm"]=bm
done
# Elvi take precedence over bookmarks, so overwrite conflicts
for el in "${elvi[@]}"; do
	objs["$el"]=el
done
unset "${elvi[@]}" "${bookmarks[@]}"

END_MANY_SELECT=DONE

# Determine elvis:
is_elvis ()
{
	[ "${objs[$1]}" = el ]
}
is_bookmark ()
{
	[ "${objs[$1]}" = bm ]
}
# Bookmarks are shown specially with a "bm:" prefix
elvis="$(for obj in "${!objs[@]}"; do echo "${objs[$obj]}:$obj"; done | sort -t: -k2 | sed 's/^\(el:\)//' | dmenu -p 'Elvis?')" || exit 1  # back out.
# Don't need the prefix anymore (it's just for differentiating elvi and bookmarks at a glance in the menu)
elvis="${elvis##bm:}"
if [[ -z "$elvis" ]]; then
	notify-send -t 1000 "$me: empty elvis"
	exit 1
elif ! is_elvis "$elvis" && ! is_bookmark "$elvis"; then
	notify-send -t 1000 "$me: '$elvis' doesn't exist"
	exit 1
elif is_bookmark "$elvis"; then
	IS_BOOKMARK=yes
else
	IS_BOOKMARK=no
fi

# Plain args:
#do_field_split="$(printf 'yes\nno\n' | dmenu -p 'Do field splitting on query?')" || exit 1
#do_accept_completions="$(printf 'yes\nno\n' | dmenu -p 'Accept completions?')" || exit 1

get_arg ()
{
	local prompt
	prompt="$1"
	{ echo "--${END_MANY_SELECT}--"; surfraw "$elvis" -complete-arg=; } | dmenu -p "$prompt"
}
ARGS=()
if ! [[ "$IS_BOOKMARK" == yes && "$DO_SKIP_BOOKMARK_TERMS" == yes ]]; then
	case "$DO_FIELD_SPLIT" in
		yes)
			arg="$(get_arg 'Query?')" || exit 1
			# Do field splitting.
			[[ $arg != "--${END_MANY_SELECT}--" ]] && ARGS+=($arg)
			;;
		no)
			# bash do-while loop: https://stackoverflow.com/a/24421013
			n=1
			while
				arg="$(get_arg "Query arg ${n}?")" || exit 1
				[[ $arg != "--${END_MANY_SELECT}--" ]]
			do	ARGS+=("$arg"); ((n++)); done

			;;
		*) exit 1 ;;
	esac
fi

# Options + their args (if any):
get_opt ()
{
	{ echo "$END_MANY_SELECT"; surfraw "$elvis" -complete=-; } |
		sed -e 's/^ //g' -e 's/ $//g' |
		tr ' ' '\n' |
		dmenu -p 'Option?'
}
get_optarg ()
{
	local opt endsentinel
	opt="$1" endsentinel="$2"
	{ [ -n "$endsentinel" ] && echo "$endsentinel"; surfraw "$elvis" -complete="$opt"; } | tr ' ' '\n' | dmenu -p "Arg to '$opt'?"
}

OPTIONS=()
opt=$(get_opt) || exit 1
listargs=()
while [[ $opt != $END_MANY_SELECT ]]; do
	case "$opt" in
		-add-*=)
			# bash do-while loop: https://stackoverflow.com/a/24421013
			while
				arg=$(get_optarg "$opt" "--${END_MANY_SELECT}--") ||
					# go to outer while loop to get new options (because we're cancelling this one!)
					{ opt=$(get_opt) && { listargs=(); continue; } || exit 1; }
				[[ $arg != "--${END_MANY_SELECT}--" ]]
			do	listargs+=("$arg"); done
			IFS=','; OPTIONS+=("$opt${listargs[*]}"); IFS=$' \t\n'
			;;
		-*=)
			arg=$(get_optarg "$opt") || { opt=$(get_opt) && continue || exit 1; }
			OPTIONS+=("$opt$arg")
			;;
		*)
			OPTIONS+=("$opt")
			;;
	esac

	opt=$(get_opt) || exit 1
done

# Finally, open browser:
exec surfraw -graphical "$elvis" "${OPTIONS[@]}" -- "${ARGS[@]}"
