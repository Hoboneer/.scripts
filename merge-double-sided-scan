#!/bin/sh
# Merge two PDFs (one for each side) to look like it was a double-sided scan.
usage ()
{
	cat <<'EOF'
Usage: merge-double-sided-scan [--help] file file
Merge two PDFs (one for each side) to look like it was a double-sided scan.

Options:
  --help, -h	View this help message
EOF
}

case "$1" in
	--help|-h) usage; exit ;;
esac

[ -z "$1" ] && { echo "first file argument missing" >&2; exit 1; }
[ -z "$2" ] && { echo "second file argument missing" >&2; exit 1; }
f1="$1"
f2="$2"

page_count_f1="$(pdfinfo "$1" | awk '/^Pages:/ {print $2}')"
page_count_f2="$(pdfinfo "$2" | awk '/^Pages:/ {print $2}')"
if [ -z "$page_count_f1" ]; then
	echo "'$f1' is an invalid PDF file" >&2
	exit 1
elif [ -z "$page_count_f2" ]; then
	echo "'$f2' is an invalid PDF file" >&2
	exit 1
elif [ "$page_count_f1" -lt "$page_count_f2" ] || [ "$(( page_count_f1 - page_count_f2 ))" -gt 1 ]; then
	echo "page count of first file must be equal to or just one greater than the page count of second file" >&2
	exit 1
fi

# Reuse the array variable for mutool's command line
set --
currpage_f1=1
currpage_f2=1
nextfile=1
until [ "$currpage_f1" -gt "$page_count_f1" ] && [ "$currpage_f2" -gt "$page_count_f2" ]; do
	case $nextfile in
		1)
			set -- "$@" "$f1" "$currpage_f1"
			currpage_f1="$(( currpage_f1 + 1 ))"
			nextfile=2
			;;
		2)
			set -- "$@" "$f2" "$currpage_f2"
			currpage_f2="$(( currpage_f2 + 1 ))"
			nextfile=1
			;;
	esac
done
mutool merge "$@"
